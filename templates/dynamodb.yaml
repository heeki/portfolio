AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ParamTableName:
    Description: DynamoDB table name
    Type: String
Resources:
  DDBTable1:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Ref ParamTableName
      AttributeDefinitions:
        - AttributeName: "user_id"
          AttributeType: "S"
        - AttributeName: "note_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "user_id"
          KeyType: "HASH"
        - AttributeName: "note_id"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  # Roles
  DDBRole1:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  # Policies
  DDBPolicy1:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Effect: Allow
          Resource:
          - arn:aws:logs:*:*:*
        Version: '2012-10-17'
      PolicyName: DDBPolicy1
      Roles:
      - !Ref DDBRole1
    Type: "AWS::IAM::Policy"

  DDBPolicy2:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:UpdateItem
          Effect: Allow
          Resource:
          - !GetAtt DDBTable1.Arn
        Version: '2012-10-17'
      PolicyName: DDBPolicy2
      Roles:
      - !Ref DDBRole1
    Type: "AWS::IAM::Policy"

Outputs:
  OutTable:
    Description: DynamoDB logical id
    Value: !Ref DDBTable1
  OutTableArn:
    Description: DynamoDB ARN
    Value: !GetAtt DDBTable1.Arn
  OutDDBRole:
    Description: Lambda role to access table
    Value: !GetAtt DDBRole1.Arn
